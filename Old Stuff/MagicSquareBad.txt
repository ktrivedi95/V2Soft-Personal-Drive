import java.io.*;
import java.util.*;

public class Solution {
	
	private static int magic = 15;

    // Complete the formingMagicSquare function below.
    static int formingMagicSquare(int[][] s) {
    	List<Integer> changesCount = new ArrayList<Integer>();
    	List<int[][]> solutions = new ArrayList<int[][]>();
    	
    	while(true) {
    		if(checkMatrix(s))
    			break;
    		
    		int count = 0;
    		
    		boolean  RD = false, LD = false;
	    	for(int i = 0; i < s.length; i++) {
	    		for(int j = 0; j < s[i].length; j++) {
	    			if(RD || LD)
	    				continue;
	    			
	    			if(i == j && totalRightDiagonal(s) == magic)
	    				RD = true;
	    			
	    			if((int)Math.abs(i-j) == 2 && totalLeftDiagonal(s) == magic)
	    				LD = true;
	    			
	    			
	    			if(totalRow(i, s) == magic) {
	    				break;
	    			} else {
	    				if(totalColumn(i, s) == magic) {
	    					continue;
	    				} else {
	    					if(magic - s[i][j] > 0) {
	    						s[i][j]++;
	    					} else {
	    						s[i][j]--;
	    					}
	    				}
	    			}	
	    		}
	    		
	    		print(s);
	    		return 0;
	    	}
	    	System.out.println("----------------------------------");
	    	
	    	if(!solutions.contains(s))
	    		solutions.add(s);
	    	
	    	changesCount.add(count);
    	}
    	
    	return 0;
    }
    
    static int min(List<Integer> list) {
    	int min = list.get(0);
    	for(int i = 0; i < list.size(); i++) {
    		if(min > list.get(i))
    			min = list.get(i);
    	}
    	return min;
    }
    
    static boolean checkMatrix(int[][] s) {
    	return (checkRows(s) && checkColumns(s) && checkDiagonals(s));
    }
    
    static boolean checkRows(int[][] s) {
    	for(int i = 0; i < s.length; i++) {
    		if(totalRow(i, s) != magic)
    			return false;
    	}
    	return true;
    }
    
    static boolean checkColumns(int[][] s) {
    	for(int i = 0; i < s.length; i++) {
    		if(totalColumn(i, s) != magic)
    			return false;
    	}
    	return true;
    }
    
    static boolean checkDiagonals(int[][] s) {
    	return (totalLeftDiagonal(s) == magic && totalRightDiagonal(s) == magic);
    }
    
    static int totalRow(int row, int[][] s) {
    	return s[row][0] + s[row][1] + s[row][2];
    }
    
    static int totalColumn(int col, int[][] s) {
    	return s[0][col] + s[1][col] + s[2][col];
    }

    static int totalLeftDiagonal(int[][] s) {
		return s[0][2] + s[1][1] + s[2][0];
	}
    
    static int totalRightDiagonal(int[][] s) {
    	return s[0][0] + s[1][1] + s[2][2];
	}
    
    static void print(int[][] s) {
    	for(int i = 0; i < s.length; i++) {
    		for(int j = 0; j < s[i].length; j++) {
    			System.out.print(s[i][j] + " ");
    		}
    		System.out.println();
    	}
    	System.out.println();
    }

    public static void main(String[] args) throws IOException {
    	int[][] prob =
    	{
    		{5, 3, 4},
    		{1, 5, 8},
    		{6, 4, 2}
    	};
    	
    	int[][] solution =
    	{
    		{8, 3, 4},
    		{1, 5, 9},
    		{6, 7, 2}
    	};
    	
    	System.out.println(formingMagicSquare(prob));
    	
    	/*for(int i = 0; i < s.length; i++) {
			System.out.println("Row " + i + " -> " + totalRow(i, s));
		}
		
		for(int i = 0; i < s.length; i++) {
			System.out.println("Column " + i + " -> " + totalColumn(i, s));
		}
		
		System.out.println("Left Diagonal -> " + totalLeftDiagonal(s));
		System.out.println("Right Diagonal -> " + totalRightDiagonal(s));*/
    }
}
