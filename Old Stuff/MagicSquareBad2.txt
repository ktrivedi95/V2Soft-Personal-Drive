import java.io.*;
import java.util.*;

class Value {
	
	int num, row, col, L, R;
	
	public Value() {}
	
	public Value(int num, int row, int col, int L, int R) {
		this.num = num;
		this.row = row;
		this.col = col;
		this.L = L;
		this.R = R;
	}

	public int getNum() {
		return num;
	}

	public void setNum(int num) {
		this.num = num;
	}

	public int getRow() {
		return row;
	}

	public void setRow(int row) {
		this.row = row;
	}

	public int getCol() {
		return col;
	}

	public void setCol(int col) {
		this.col = col;
	}

	public int getL() {
		return L;
	}

	public void setL(int l) {
		L = l;
	}

	public int getR() {
		return R;
	}

	public void setR(int r) {
		R = r;
	}

	@Override
	public String toString() {
		return "[" + num + "" + row + "" + col + "" + L + "" + R + "]";
		//return "Value [num=" + num + ", row=" + row + ", col=" + col + ", L=" + L + ", R=" + R + "]";
	}
}

public class MagicSquare {
	
	private static int magic = 15;

    static int formingMagicSquare(int[][] s) {
    	int[][] copy = new int[s.length][s[0].length];
    	for(int i = 0; i < s.length; i++)
			for(int j = 0; j < s[i].length; j++)
				copy[i][j] = s[i][j];
    	
    	Value[][] value = copyMatrix(copy);
    	
    	while(true) {
    		int i = 0, j = 0;
    		
    		Value v = value[i][j];
    		
    		int sumRow = addRow(v.getRow(), copy);
    		int sumCol = addColumn(v.getCol(), copy);
    		
    		int sumL = 0, sumR = 0;
    		if(v.getL() == 1)
    			sumL = addLeftDiagonal(copy);
    		if(v.getR() == 1)
    			sumR = addRightDiagonal(copy);
    		
    		int diffRow = 0;
    		if(sumRow < magic)
    			diffRow = magic - sumRow;
    		if(sumRow > magic)
    			diffRow = sumRow - magic;
    		
    		
    		
    		
    		//if(checkMatrix(value))
    		//	break;
    		break;
    	}
    	
    	return 0;
    }
    
    static Value[][] copyMatrix(int[][] s) {
    	Value[][] copy = new Value[s.length][s[0].length];
    	int n = s.length - 1;
    	for(int i = 0; i < s.length; i++) {
			for(int j = 0; j < s[i].length; j++) {
				Value v = new Value();
				v.setNum(s[i][j]);
				v.setRow(i);
				v.setCol(j);
				
				if(i == j)
					v.setL(1);
				else
					v.setL(0);
				
				if(i + j == n)
					v.setR(1);
				else
					v.setR(0);
				
				copy[i][j] = v;
			}
    	}
    	
    	return copy;
    }
    
    static boolean checkMatrix(Value[][] v) {
    	int[][] s = new int[v.length][v[0].length];
    	for(int i = 0; i < s.length; i++) {
			for(int j = 0; j < s[i].length; j++) {
				s[i][j] = v[i][j].getNum();
			}
    	}
    	
    	return (checkRows(s) && 
    			checkColumns(s) && 
    			checkLeftDiagonal(s) && 
    			checkRightDiagonal(s));
    }
    
    static boolean checkRows(int[][] s) {
    	for(int i = 0; i < s.length; i++) {
    		if(addRow(i, s) != magic)
    			return false;
		}
    	return true;
    }
    
	static boolean checkColumns(int[][] s) {
		for(int i = 0; i < s[0].length; i++) {
			if(addColumn(i, s) != magic)
    			return false;
		}
		
		return true;
	}
	
	static boolean checkLeftDiagonal(int[][] s) {
		return addLeftDiagonal(s) == magic;
	}
	
	static boolean checkRightDiagonal(int[][] s) {
		return addRightDiagonal(s) == magic;
	}
    
    static int addRow(int i, int[][] s) {
    	int sum = 0;
    	for(int j = 0; j < s[i].length; j++) {
    		sum += s[i][j];
    	}
    	return sum;
    }
    
    static int addColumn(int j, int[][] s) {
    	int sum = 0;
    	for(int i = 0; i < s.length; i++) {
    		sum += s[i][j];
    	}
    	return sum;
    }
    
    static int addLeftDiagonal(int[][] s) {
		int sum = 0;
		for(int i = 0; i < s.length; i++) {
			for(int j = 0; j < s[i].length; j++) {
				if(i == j)
					sum += s[i][j];
			}
		}
		
		return sum;
	}
    
    static int addRightDiagonal(int[][] s) {
    	int sum = 0, n = s.length - 1;
    	for(int i = 0; i < s.length; i++) {
			for(int j = 0; j < s[i].length; j++) {
				if(i + j == n)
					sum += s[i][j];
			}
		}
		
		return sum;
	}

    public static void main(String[] args) throws IOException {
    	int[][] prob =
    	{
    		{5, 3, 4},
    		{1, 5, 8},
    		{6, 4, 2}
    	};
    	
    	int[][] solution =
    	{
    		{8, 3, 4},
    		{1, 5, 9},
    		{6, 7, 2}
    	};
    	
    	System.out.println(formingMagicSquare(prob));
    	
    	/*for(int i = 0; i < s.length; i++) {
			System.out.println("Row " + i + " -> " + totalRow(i, s));
		}
		
		for(int i = 0; i < s.length; i++) {
			System.out.println("Column " + i + " -> " + totalColumn(i, s));
		}
		
		System.out.println("Left Diagonal -> " + totalLeftDiagonal(s));
		System.out.println("Right Diagonal -> " + totalRightDiagonal(s));
    	
    	
    	for(int i = 0; i < s.length; i++) {
			for(int j = 0; j < s[i].length; j++) {
				System.out.print(copy[i][j].toString() + "\t");
			}
			System.out.println();
    	}
    	****************************************************
    	int[][] copy = new int[s.length][s[0].length];
    	for(int i = 0; i < s.length; i++)
			for(int j = 0; j < s[i].length; j++)
				copy[i][j] = s[i][j];
		*/
    }
}
